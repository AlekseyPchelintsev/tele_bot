import asyncio
import logging
import random
import nltk
from nltk.corpus import stopwords
from nltk.stem import SnowballStemmer
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram import F, Router, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from contextlib import suppress
from config import delete_profile_id, in_progress
from aiogram.exceptions import TelegramBadRequest
from src.modules.pagination_logic import no_data_after_reboot_bot, back_callback, load_pagination, load_pagination_bot
from src.modules.notifications import (loader,
                                       bot_notification_about_like,
                                       bot_send_message_about_like,
                                       bot_send_message_matchs_likes)

from src.modules.delete_messages import del_last_message
from src.database.requests.user_data import get_data, get_user_data
from src.modules.get_self_data import get_user_info
from src.modules.check_gender import check_gender
from src.modules.hobbies_list import hobbies_list
from src.handlers.edit_name import check_emodji
from src.database.requests.search_users import (get_users_by_hobby,
                                                check_users_by_city,
                                                check_users_self_city,
                                                check_users_by_self_hobby,
                                                get_stemmed_self_hobbies)

from src.handlers.edit_hobbies import wrong_search_hobby_name
from src.handlers.edit_city import wrong_search_city_name
from src.database.requests.likes_users import (insert_reaction,
                                               delete_and_insert_reactions,
                                               get_liked_users_ids,
                                               check_matches_two_users,
                                               get_ignore_users_ids)
import src.modules.keyboard as kb

router = Router()

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—É—Ç–∏ nltk_data –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ "—Å—Ç–æ–ø" —Å–ª–æ–≤
nltk.data.path.append('/Users/dude/dev/python/tele_bot/nltk_data')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–º–º–µ—Ä–∞ –∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤
language = 'russian'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–º–º–µ—Ä–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
stemmer = SnowballStemmer(language)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ "—Å—Ç–æ–ø" —Å–ª–æ–≤
stop_words = set(stopwords.words(language))


class Registration(StatesGroup):
    search_city = State()
    search_hobby = State()


delete_messages = []
delete_last_message = []


# –ú–µ–Ω—é "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"


@router.callback_query(F.data == 'users')
async def check_users_menu(callback: CallbackQuery, state: FSMContext):

    await state.clear()

    user_tg_id = callback.from_user.id
    data = await asyncio.to_thread(get_user_data, user_tg_id)
    gender = await check_gender(data[0][3])
    hobbies = await hobbies_list(data[1])

    try:
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=f'{data[0][1]}',
                caption=(
                    f'\n<b>–ò–º—è:</b> {data[0][0]}\n'
                    f'<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data[0][4]}\n'
                    f'<b>–ü–æ–ª:</b> {gender}\n'
                    f'<b>–ì–æ—Ä–æ–¥:</b> {data[0][5]}\n'
                    f'<b>–£–≤–ª–µ—á–µ–Ω–∏—è:</b> {hobbies}'
                ),
                parse_mode='HTML'
            ),
            reply_markup=kb.users_menu
        )
    except:
        await callback.message.answer_photo(
            photo=f'{data[0][1]}',
            caption=(
                f'\n<b>–ò–º—è:</b> {data[0][0]}\n'
                f'<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data[0][4]}\n'
                f'<b>–ü–æ–ª:</b> {gender}\n'
                f'<b>–ì–æ—Ä–æ–¥:</b> {data[0][5]}\n'
                f'<b>–£–≤–ª–µ—á–µ–Ω–∏—è:</b> {hobbies}'
            ),
            parse_mode='HTML',
            reply_markup=kb.users_menu
        )


# –æ—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞


@router.callback_query(F.data.in_(['advanced_search', 'all_users']))
async def search_users_menu(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    data = callback.data

    # –¥–æ–±–∞–≤–ª—è—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏–µ –∏–Ω—Ñ—É –æ –≤—ã–±—Ä–∞–Ω–æ–º –º–µ–Ω—é —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–∞–ª–µ–µ
    await state.update_data(type_of_search=data)

    # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    user_info = await get_user_info(user_tg_id)

    # –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ
    self_data = user_info['data']
    self_gender = user_info['gender']
    self_hobbies = user_info['hobbies']

    # –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=f'{self_data[0][1]}',
                caption=(
                    f'\n<b>–ò–º—è:</b> {self_data[0][0]}\n'
                    f'<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {self_data[0][4]}\n'
                    f'<b>–ü–æ–ª:</b> {self_gender}\n'
                    f'<b>–ì–æ—Ä–æ–¥:</b> {self_data[0][5]}\n'
                    f'<b>–£–≤–ª–µ—á–µ–Ω–∏—è:</b> {self_hobbies}\n\n'
                    '<b>–ö–æ–≥–æ –∏—â–µ–º?</b>'
                ),
                parse_mode='HTML'
            ),
            reply_markup=kb.gender_search
        )
    except:
        await callback.message.answer_photo(
            photo=f'{self_data[0][1]}',
            caption=(
                f'\n<b>–ò–º—è:</b> {self_data[0][0]}\n'
                f'<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {self_data[0][4]}\n'
                f'<b>–ü–æ–ª:</b> {self_gender}\n'
                f'<b>–ì–æ—Ä–æ–¥:</b> {self_data[0][5]}\n'
                f'<b>–£–≤–ª–µ—á–µ–Ω–∏—è:</b> {self_hobbies}\n\n'
                '<b>–ö–æ–≥–æ –∏—â–µ–º?</b>'
            ),
            parse_mode='HTML',
            reply_markup=kb.gender_search
        )


# –í—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@router.callback_query(F.data.in_(['male-search', 'female-search', 'all-search']))
async def choise_gender_for_search(callback: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    search_data = data.get('type_of_search')
    gender_data = callback.data

    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ callback.data –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –¥—Ä—É–≥–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if gender_data == 'male-search':
        gender_data = 'male'
    elif gender_data == 'female-search':
        gender_data = 'female'
    elif gender_data == 'all-search':
        gender_data = 'all'

    if search_data == 'all_users':
        await search_all_users(callback, state, gender_data)
    elif search_data == 'advanced_search':
        await state.update_data(type_of_gender=gender_data)
        await serach_users_by_city(callback, state)


# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ (–£–î–ê–õ–ò–¢–¨)

'''
async def search_users_in_city(callback, state, gender_data):

    user_tg_id = callback.from_user.id

    ignore_users_ids = await asyncio.to_thread(get_ignore_users_ids, user_tg_id)
    liked_users_ids = await asyncio.to_thread(get_liked_users_ids, user_tg_id)

    # –æ–±—ä–µ–¥–∏–Ω—è—é –æ–±–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    ignore_list = ignore_users_ids | liked_users_ids

    # –ø–æ–ª—É—á–∞—é –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    data = await asyncio.to_thread(get_users_in_city, user_tg_id, gender_data, ignore_list)

    # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    user_info = await get_user_info(user_tg_id)

    # –ò–∑–≤–ª–µ–∫–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    self_data = user_info['data']
    self_gender = user_info['gender']
    self_hobbies = user_info['hobbies']

    if not data:

        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=f'{self_data[0][1]}',
                caption=(
                    f'\n<b>–ò–º—è:</b> {self_data[0][0]}\n'
                    f'<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {self_data[0][4]}\n'
                    f'<b>–ü–æ–ª:</b> {self_gender}\n'
                    f'<b>–ì–æ—Ä–æ–¥:</b> {self_data[0][5]}\n'
                    f'<b>–£–≤–ª–µ—á–µ–Ω–∏—è:</b> {self_hobbies}\n\n'
                    '‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n'
                    'üîé –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.'
                ),
                parse_mode='HTML'
            ),
            reply_markup=kb.gender_search
        )

    else:

        gender = await check_gender(data[0][4])
        hobbies = await hobbies_list(data[0][7])
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=f'{data[0][2]}',
                caption=(
                    f'\n<b>–ò–º—è:</b> {data[0][1]}\n'
                    f'<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data[0][5]}\n'
                    f'<b>–ü–æ–ª:</b> {gender}\n'
                    f'<b>–ì–æ—Ä–æ–¥:</b> {data[0][6]}\n'
                    f'<b>–£–≤–ª–µ—á–µ–Ω–∏—è:</b> {hobbies}'
                ),
                parse_mode='HTML'
            ),
            reply_markup=kb.paginator(
                list_type='hobbies_users')
        )

        await state.update_data(users_data=data)
'''

# ================================
# –ü–û–ò–°–ö –õ–Æ–î–ï–ô –ü–û –ì–û–†–û–î–ê–ú         |
# ================================


async def serach_users_by_city(callback, state):

    edit_message = await callback.message.edit_media(
        media=InputMediaPhoto(
            media=f'{in_progress}',
            caption=(
                '\n<b>–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?</b>'
                '\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ...</b> ‚å®Ô∏è'
                '\n\n<i>...–∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b>, '
                '–≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i>'
            ),
            parse_mode='HTML'
        ),
        reply_markup=kb.city_search
    )

    await state.update_data(message_id=edit_message.message_id)
    await state.set_state(Registration.search_city)


# –ø–æ–∏—Å–∫ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –≤ –ª—é–±–æ–º


@router.callback_query(F.data.in_(['home_city', 'all_cities']))
async def search_in_city(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    search_data = callback.data

    # –ø–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    gender_data = await state.get_data()
    search_gender = gender_data.get('type_of_gender')

    if search_data == 'home_city':

        # –ø—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –ø–æ–ª—É –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ
        home_city_users = await asyncio.to_thread(check_users_self_city,
                                                  user_tg_id,
                                                  search_gender)

        if home_city_users:

            await search_users_by_hobby(callback, state)

        else:
            try:
                await callback.message.edit_media(
                    media=InputMediaPhoto(
                        media=f'{in_progress}',
                        caption=(
                            '\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b> üòî'
                            '\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç <b>"–ù–µ –≤–∞–∂–Ω–æ"</b> '
                            '—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö...'
                            '\n\n<i>...–∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, '
                            '—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤ –Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i>'
                        ),
                        parse_mode='HTML'
                    ),
                    reply_markup=kb.city_search
                )
            except:
                await callback.message.answer_photo(
                    photo=f'{in_progress}',
                    caption=(
                        '\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b> üòî'
                        '\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç <b>"–ù–µ –≤–∞–∂–Ω–æ"</b> '
                        '—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö...'
                        '\n\n<i>...–∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, '
                        '—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤ –Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i>'
                    ),
                    parse_mode='HTML',
                    reply_markup=kb.city_search
                )
            await state.set_state(Registration.search_city)

    elif search_data == 'all_cities':
        await state.update_data(city_users='all')
        await search_users_by_hobby(callback, state)


# –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≥–æ—Ä–æ–¥—É


@router.message(Registration.search_city)
async def search_by_city(message: Message, state: FSMContext, bot: Bot):

    user_tg_id = message.from_user.id

    # —É–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç
    await del_last_message(message)

    # –ø–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª–∞
    gender_data = await state.get_data()
    search_gender = gender_data.get('type_of_gender')

    # –ø–æ–ª—É—á–∞—é id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_message = await state.get_data()
    message_id = edit_message.get('message_id')

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –∞ –Ω–µ –º–µ–¥–∏–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–¥.)
    if message.content_type == 'text':
        city_name = message.text.title()

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–º–∞–π–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        emodji_checked = await check_emodji(city_name)

        if not emodji_checked:
            await wrong_search_city_name(user_tg_id, message_id, bot)
            return

        # –ø—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–ª–æ–≤–∏—è–º
        search_city_users = await asyncio.to_thread(check_users_by_city,
                                                    user_tg_id,
                                                    city_name,
                                                    search_gender)

        if not search_city_users:

            await bot.edit_message_media(
                chat_id=user_tg_id,
                message_id=message_id,
                media=InputMediaPhoto(
                    media=f'{in_progress}',
                    caption=(
                        f'\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ <b>{city_name}</b> '
                        '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'
                        '\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç <b>"–ù–µ –≤–∞–∂–Ω–æ"</b> '
                        '—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö...'
                        '\n\n<b>...–∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞, '
                        '–≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>'
                    ),
                    parse_mode='HTML'
                ),
                reply_markup=kb.city_search
            )

        else:

            await bot.edit_message_media(
                chat_id=user_tg_id,
                message_id=message_id,
                media=InputMediaPhoto(
                    media=f'{in_progress}',
                    caption=(
                        '<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ...</b> ‚å®Ô∏è'
                        '\n\n... –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è</b> –≤ —á–∞—Ç, '
                        '–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:'
                    ),
                    parse_mode='HTML'
                ),
                reply_markup=kb.hobbies_search
            )
            await state.update_data(city_users=city_name)
            await state.set_state(Registration.search_hobby)


# ================================
# –ü–û–ò–°–ö –õ–Æ–î–ï–ô –ü–û –•–û–ë–ë–ò           |
# ================================


async def search_users_by_hobby(callback, state):

    edit_message = await callback.message.edit_media(
        media=InputMediaPhoto(
            media=f'{in_progress}',
            caption=(
                '<b>\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ...</b> ‚å®Ô∏è'
                '\n\n... –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è</b> –≤ —á–∞—Ç, '
                '–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:'
            ),
            parse_mode='HTML'
        ),
        reply_markup=kb.hobbies_search
    )

    await state.update_data(message_id=edit_message.message_id)
    await state.set_state(Registration.search_hobby)


# –ø–æ –º–æ–∏–º —Ö–æ–±–±–∏ –∏–ª–∏ –ø–æ –ª—é–±—ã–º


@router.callback_query(F.data.in_(['my_hobbies', 'all_hobbies']))
async def my_hobbies_or_all(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    search_data = callback.data

    # –ø–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    gender_data = await state.get_data()
    search_gender = gender_data.get('type_of_gender')

    # —Å–ø–∏—Å–∫–∏ user_tg_ids –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞:
    # –ø–æ–ª—É—á–∞—é id –ø–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω–∞–¥–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –ø–æ–∏—Å–∫–µ
    ignore_users_ids = await asyncio.to_thread(get_ignore_users_ids, user_tg_id)
    liked_users_ids = await asyncio.to_thread(get_liked_users_ids, user_tg_id)

    # –æ–±—ä–µ–¥–∏–Ω—è—é –æ–±–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    ignore_list = ignore_users_ids | liked_users_ids

    if search_data == 'my_hobbies':

        # –ø–æ–≤–µ—Ä—è—é –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ö–æ–±–±–∏ —É "–º–µ–Ω—è"
        check_my_hobbies = await asyncio.to_thread(check_users_by_self_hobby,
                                                   user_tg_id)

        if check_my_hobbies:
            # —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ö–æ–±–±–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å—Ç–µ–º–º–∏–Ω–≥ –∏ –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞
            my_hobbies_list = await asyncio.to_thread(get_stemmed_self_hobbies,
                                                      user_tg_id)

            # TODO –ü–ï–†–ï–î–ê–¢–¨ –°–ü–ò–°–ö–ò ID –î–õ–Ø –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø
            await asyncio.to_thread(get_users_by_hobby,
                                    my_hobbies_list,
                                    user_tg_id,
                                    search_gender,
                                    ignore_list)
        else:
            try:
                await callback.message.edit_media(
                    media=InputMediaPhoto(
                        media=f'{in_progress}',
                        caption=(
                            '\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å —Å—Ö–æ–∂–∏–º–∏ '
                            '—É–≤–ª–µ—á–µ–Ω–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>'
                            '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '
                            '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>–≥–æ—Ä–æ–¥</b> –∏–ª–∏ <b>–ø–æ–ª</b>.'
                            '\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö '
                            '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ —É–≤–ª–µ—á–µ–Ω–∏—è–º...'
                            '\n\n...–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ –≤ —á–∞—Ç:'
                        ),
                        parse_mode='HTML'
                    ),
                    reply_markup=kb.hobbies_search
                )
            except:
                await callback.message.answer_photo(
                    photo=f'{in_progress}',
                    caption=(
                        '\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å —Å—Ö–æ–∂–∏–º–∏ '
                        '—É–≤–ª–µ—á–µ–Ω–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>'
                        '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '
                        '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>–≥–æ—Ä–æ–¥</b> –∏–ª–∏ <b>–ø–æ–ª</b>.'
                        '\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö '
                        '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ —É–≤–ª–µ—á–µ–Ω–∏—è–º...'
                        '\n\n...–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ –≤ —á–∞—Ç:'
                    ),
                    parse_mode='HTML',
                    reply_markup=kb.hobbies_search
                )
            await state.set_state(Registration.search_hobby)

    elif search_data == 'all_hobbies':

        hobbies = 'all'
        # TODO –ü–ï–†–ï–î–ê–¢–¨ –°–ü–ò–°–ö–ò ID –î–õ–Ø –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø
        await asyncio.to_thread(hobbies,
                                my_hobbies_list,
                                user_tg_id,
                                search_gender,
                                ignore_list)


# –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ö–æ–±–±–∏


@router.message(Registration.search_hobby)
async def search_by_hobby(message: Message, state: FSMContext, bot: Bot):
    await del_last_message(message)

    user_tg_id = message.from_user.id
    gender_type = await state.get_data()
    gender_data = gender_type.get('type_of_gender')

    # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    user_info = await get_user_info(user_tg_id)

    # –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ
    self_data = user_info['data']
    self_gender = user_info['gender']
    self_hobbies = user_info['hobbies']

    edit_message = await state.get_data()
    message_id = edit_message.get('message_id')

    if message.content_type == 'text':
        request = message.text.lower()

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–º–∞–π–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        emodji_checked = await check_emodji(request)

        if not emodji_checked:
            await wrong_search_hobby_name(user_tg_id, message_id, bot)
            return

        # —Ä–∞–∑–¥–µ–ª—è—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        words_for_stemmed = request.split()

        # –§–∏–ª—å—Ç—Ä—É—é —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        filtered_words = [
            word for word in words_for_stemmed if word not in stop_words
        ]

        # –ø—Ä–∏–º–µ–Ω—è—é —Å—Ç–µ–º–º–∏–Ω–≥ –∫ –æ—Å—Ç–∞–≤—à–∏–º—Å—è —Å–ª–æ–≤–∞–º
        stemmed_words = [stemmer.stem(word) for word in filtered_words]

        # –ø–æ–ª—É—á–∞—é id –ø–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω–∞–¥–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –ø–æ–∏—Å–∫–µ
        ignore_users_ids = await asyncio.to_thread(get_ignore_users_ids, user_tg_id)
        liked_users_ids = await asyncio.to_thread(get_liked_users_ids, user_tg_id)

        # –æ–±—ä–µ–¥–∏–Ω—è—é –æ–±–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
        ignore_list = ignore_users_ids | liked_users_ids

        # –ø–æ–ª—É—á–∞—é –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        data = await asyncio.to_thread(get_users_by_hobby, stemmed_words, user_tg_id, gender_data, ignore_list)

        if not data:

            await bot.edit_message_media(
                chat_id=user_tg_id,
                message_id=message_id,
                media=InputMediaPhoto(
                    media=f'{in_progress}',
                    caption=(
                        '\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º —É–≤–ª–µ—á–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>'
                        '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '
                        '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>–≥–æ—Ä–æ–¥</b> –∏–ª–∏ <b>–ø–æ–ª</b>.'
                        '\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö '
                        '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ —É–≤–ª–µ—á–µ–Ω–∏—è–º...'
                        '\n\n...–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ –≤ —á–∞—Ç:'
                    ),
                    parse_mode='HTML'
                ),
                reply_markup=kb.hobbies_search
            )

        else:
            await state.clear()

            await load_pagination_bot(bot,
                                      user_tg_id,
                                      message_id,
                                      data,
                                      'paginator',
                                      'hobbies_users')

            await state.update_data(users_data=data)

    else:
        await wrong_search_hobby_name(user_tg_id, message_id, bot)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


async def search_all_users(callback, state, gender_data):

    user_tg_id = callback.from_user.id

    # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    user_info = await get_user_info(user_tg_id)

    # –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ
    self_data = user_info['data']
    self_gender = user_info['gender']
    self_hobbies = user_info['hobbies']

    try:
        # –ø–æ–ª—É—á–∞—é —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        ignore_users_ids = await asyncio.to_thread(get_ignore_users_ids, user_tg_id)
        liked_users_ids = await asyncio.to_thread(get_liked_users_ids, user_tg_id)

        # –æ–±—ä–µ–¥–∏–Ω—è—é –æ–±–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
        ignore_list = ignore_users_ids | liked_users_ids

        # –ø–æ–ª—É—á–∞—é –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        data = await asyncio.to_thread(get_data, user_tg_id, gender_data, ignore_list)
    except Exception as e:
        print(f'SHOW ALL USERS ERROR: {e}')

    if not data:

        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=f'{in_progress}',
                caption=(
                    '\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>'
                    '\n\nüîé –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.'
                ),
                parse_mode='HTML'
            ),
            reply_markup=kb.gender_search
        )

    else:
        await load_pagination(callback.message,
                              data,
                              'paginator',
                              'all_users')

        await state.update_data(users_data=data)


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@router.callback_query(
    kb.Pagination.filter(F.action.in_(
        ['prev',
         'next',
         'menu',
         'like']
    ))
)
async def pagination_handler(
    callback: CallbackQuery,
    callback_data: kb.Pagination,
    state: FSMContext,
    bot: Bot
):
    user_tg_id = callback.message.chat.id
    list_type = callback_data.list_type

    data = (await state.get_data()).get('users_data')

    # –µ—Å–ª–∏ –±–æ—Ç —É—à–µ–ª –≤ —Ä–µ–±—É—Ç —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not data:
        await no_data_after_reboot_bot(callback)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ data –Ω–µ None
    else:
        page_num = int(callback_data.page)

        if callback_data.action == 'prev':
            page = max(page_num - 1, 0)
        elif callback_data.action == 'next':
            page = min(page_num + 1, len(data) - 1)
        else:
            page = page_num

        # –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        if callback_data.action == 'menu':

            # –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ç–µ–∫—Å—Ç –ø–æ–¥ –∏–Ω—Ñ–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π))
            await back_callback(callback.message, user_tg_id, 'users_menu')

        # –ª–∞–π–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif callback_data.action == 'like':

            current_user_id = data[page][0]

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–¥
            await asyncio.to_thread(insert_reaction, user_tg_id, current_user_id)

            # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot_send_message_about_like(user_tg_id, current_user_id, bot)

            # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot_notification_about_like(callback.message, f'{data[page][1]}')

            # —É–¥–∞–ª—è–µ–º –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data
            data.pop(page)

            # –µ—Å–ª–∏ False (data –ø—É—Å—Ç–∞—è)
            if not data:

                # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                text_info = '<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç</b> ü§∑‚Äç‚ôÇÔ∏è'
                await back_callback(callback.message,
                                    user_tg_id,
                                    'search_users',
                                    text_info)

            # –µ—Å–ª–∏ True (data –Ω–µ –ø—É—Å—Ç–∞—è)
            else:

                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if page >= len(data):

                    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                    page = len(data) - 1

                    # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
                await load_pagination(callback.message,
                                      data,
                                      'paginator',
                                      list_type,
                                      page)

            # –ø–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏ –æ—Ç–≤–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ userreactions
            check = await asyncio.to_thread(check_matches_two_users, user_tg_id, current_user_id)

            # –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å
            if check:

                # —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ userreactions –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ matchreactions
                await asyncio.to_thread(delete_and_insert_reactions, user_tg_id, current_user_id)

                # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                await bot_send_message_matchs_likes(user_tg_id, current_user_id, bot, callback)

                # –∑–∞–≥—Ä—É–∂–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
                await load_pagination(callback.message,
                                      data,
                                      'paginator',
                                      list_type,
                                      page)

        else:

            # —É–±–∏—Ä–∞–µ—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            with suppress(TelegramBadRequest):

                # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å
                await load_pagination(callback.message,
                                      data,
                                      'paginator',
                                      list_type,
                                      page)

    await callback.answer()
