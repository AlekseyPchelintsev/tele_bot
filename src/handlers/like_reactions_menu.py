import asyncio
import logging
from config import delete_profile_id
from aiogram import Bot
from aiogram.types import CallbackQuery, InputMediaPhoto
from aiogram import F, Router
from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from src.modules.pagination_logic import no_data_after_reboot_bot, back_callback, load_pagination
from src.modules.notifications import (bot_notification_about_dislike,
                                       bot_send_message_about_like,
                                       bot_send_message_matchs_likes,
                                       notification_to_late_incoming_reaction)

from src.modules.check_gender import check_gender
from src.modules.hobbies_list import hobbies_list
from src.database.requests.user_data import get_user_data
from src.database.requests.likes_users import (insert_reaction,
                                               get_reaction,
                                               delete_reaction,
                                               get_users_with_likes,
                                               get_users_who_liked_me,
                                               delete_and_insert_reactions,
                                               get_matches_users_data,
                                               send_user_to_ignore_table,
                                               delete_from_my_contacts,
                                               get_my_ignore_list_users,
                                               remove_user_from_ignore_table)

import src.modules.keyboard as kb


router = Router()

# –í—Ö–æ–¥—è—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∞–∫—Ü–∏–∏


@router.callback_query(F.data.startswith('accept_request:'))
async def accept_incoming_request_alert(callback: CallbackQuery, bot: Bot):

    user_tg_id = callback.from_user.id
    current_user_id = callback.data.split(':')[1]
    check = await asyncio.to_thread(get_reaction, current_user_id, user_tg_id)

    if check:
        await asyncio.to_thread(insert_reaction, user_tg_id, current_user_id)
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –±–µ—Å–µ–¥—ã
        await bot_send_message_matchs_likes(user_tg_id, current_user_id, bot, callback)

        # —É–¥–∞–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã userreactions –∏
        # –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É matchreactions
        # –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
        await asyncio.to_thread(delete_and_insert_reactions,
                                user_tg_id,
                                current_user_id)
    else:
        await asyncio.to_thread(insert_reaction, user_tg_id, current_user_id)
        await bot_send_message_about_like(user_tg_id, current_user_id, bot)
        await callback.message.edit_media(media=InputMediaPhoto(
            media=delete_profile_id,
            caption=(
                '<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b> ü´§\n\n'
                '<b>–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ —É–¥–∞–ª–∏–ª —Å–≤–æ—é —Ä–µ–∞–∫—Ü–∏—é</b> üòî\n\n'
                '<i>–ù–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –µ–º—É –≤–∞—à—É üòâ</i>'
            ),
            parse_mode='HTML'
        ),
            reply_markup=kb.error_add_to_contacts
        )


@router.callback_query(F.data == 'accept_late')
async def accept_late_incoming_request_alert(callback: CallbackQuery):
    user_tg_id = callback.from_user.id
    await notification_to_late_incoming_reaction(callback.message, user_tg_id)


# –ú–µ–Ω—é —Ä–µ–∞–∫—Ü–∏–π


@router.callback_query(F.data == 'all_reactions')
async def all_reactions_menu(callback: CallbackQuery):

    user_tg_id = callback.from_user.id
    self_data = await asyncio.to_thread(get_user_data, user_tg_id)
    self_gender = await check_gender(self_data[0][3])
    self_hobbies = await hobbies_list(self_data[1])

    try:
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=f'{self_data[0][1]}',
                caption=(
                    f'\n<b>–ò–º—è:</b> {self_data[0][0]}\n'
                    f'<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {self_data[0][4]}\n'
                    f'<b>–ü–æ–ª:</b> {self_gender}\n'
                    f'<b>–ì–æ—Ä–æ–¥:</b> {self_data[0][5]}\n'
                    f'<b>–£–≤–ª–µ—á–µ–Ω–∏—è:</b> {self_hobbies}'
                ),
                parse_mode='HTML'
            ),
            reply_markup=kb.reactions
        )
    except:
        await callback.message.answer_photo(
            photo=f'{self_data[0][1]}',
            caption=(
                f'\n<b>–ò–º—è:</b> {self_data[0][0]}\n'
                f'<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {self_data[0][4]}\n'
                f'<b>–ü–æ–ª:</b> {self_gender}\n'
                f'<b>–ì–æ—Ä–æ–¥:</b> {self_data[0][5]}\n'
                f'<b>–£–≤–ª–µ—á–µ–Ω–∏—è:</b> {self_hobbies}'
            ),
            parse_mode='HTML',
            reply_markup=kb.reactions
        )

# –ú–æ–∏ —Ä–µ–∞–∫—Ü–∏–∏


@router.callback_query(F.data == 'my_reactions')
async def my_reactions(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    data = await asyncio.to_thread(get_users_with_likes, user_tg_id)

    # –µ—Å–ª–∏ False (–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
    if not data:

        # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
        text_info = '<b>–°–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –ø—É—Å—Ç</b> ü§∑‚Äç‚ôÇÔ∏è'
        await back_callback(callback.message,
                            user_tg_id,
                            'back_reactions',
                            text_info)

    # –µ—Å–ª–∏ True (–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    else:

        await load_pagination(callback.message,
                              data,
                              'paginator_likes',
                              'my_like_users')

        await state.update_data(users_data=data)

# –í—Ö–æ–¥—è—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏


@router.callback_query(F.data == 'incoming_reactions_list')
async def my_reactions(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    data = await asyncio.to_thread(get_users_who_liked_me, user_tg_id)

    # –µ—Å–ª–∏ False (–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
    if not data:

        # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
        text_info = '<b>–í—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∞–∫—Ü–∏–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç</b> üòî'
        await back_callback(callback.message,
                            user_tg_id,
                            'back_reactions',
                            text_info)

    # –µ—Å–ª–∏ True (–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    else:

        await load_pagination(callback.message, data, 'incoming_reactions', 'incoming_like_users')

        await state.update_data(users_data=data)

# –í–∑–∞–∏–º–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ (–º–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã)


@router.callback_query(F.data == 'match_reactions_list')
async def my_reactions(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    data = await asyncio.to_thread(get_matches_users_data, user_tg_id)

    # –µ—Å–ª–∏ False (–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
    if not data:

        # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
        text_info = '<b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç</b> üòî'
        await back_callback(callback.message,
                            user_tg_id,
                            'back_reactions',
                            text_info)

    # –µ—Å–ª–∏ True (–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    else:

        await load_pagination(callback.message, data, 'match_reactions_pagination', 'match_like_users')

        await state.update_data(users_data=data)


@router.callback_query(F.data == 'ignore_list')
async def ignore_users_list(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id

    data = await asyncio.to_thread(get_my_ignore_list_users, user_tg_id)

    if not data:

        # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
        text_info = '<b>–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>'
        await back_callback(callback.message,
                            user_tg_id,
                            'back_reactions',
                            text_info)

    # –µ—Å–ª–∏ True (–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    else:

        await load_pagination(callback.message, data, 'ignored_users_pagination', 'ignore_users_list')

        await state.update_data(users_data=data)

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ "–ú–æ–∏ —Ä–µ–∞–∫—Ü–∏–∏"


@router.callback_query(
    kb.PaginationLikes.filter(F.action.in_(
        ['prev_likes',
         'next_likes',
         'menu_likes',
         'in_reactions_like',
         'in_reactions_dislike',
         'delete_incoming',
         'delete_contact',
         'remove_from_ignore']))
)
async def pagination_handler_likes(
    callback: CallbackQuery,
    callback_data: kb.PaginationLikes,
    state: FSMContext,
    bot: Bot
):
    user_tg_id = callback.message.chat.id
    list_type = callback_data.list_type

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ list_type –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    if list_type == 'my_like_users':
        keyboard = 'paginator_likes'
    elif list_type == 'incoming_like_users':
        keyboard = 'incoming_reactions'
    elif list_type == 'match_like_users':
        keyboard = 'match_reactions_pagination'

    # data[0][3] - –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = (await state.get_data()).get('users_data')

    # –µ—Å–ª–∏ –±–æ—Ç —É—à–µ–ª –≤ —Ä–µ–±—É—Ç —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not data:
        await no_data_after_reboot_bot(callback)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ data –Ω–µ None
    else:
        page_num = int(callback_data.page)

        if callback_data.action == 'prev_likes':
            page = max(page_num - 1, 0)
        elif callback_data.action == 'next_likes':
            page = min(page_num + 1, len(data) - 1)
        else:
            page = page_num

            # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        current_user_id = data[page][0]

        # –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        if callback_data.action == 'menu_likes':

            # –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ç–µ–∫—Å—Ç –ø–æ–¥ –∏–Ω—Ñ–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π))
            await back_callback(callback.message, user_tg_id, 'reactions')

            # –ë–ª–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ "incoming_reactions" / "–í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã"

        # –ø—Ä–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞ –≤ "–í—Ö–æ–¥—è—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏"
        elif callback_data.action == 'in_reactions_like':

            check = await asyncio.to_thread(get_reaction, current_user_id, user_tg_id)

            if check:

                # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤ –±–¥
                await asyncio.to_thread(insert_reaction, user_tg_id, current_user_id)
                # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –±–µ—Å–µ–¥—ã
                await bot_send_message_matchs_likes(user_tg_id, current_user_id, bot, callback)

                # —É–¥–∞–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã userreactions –∏
                # –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É matchreactions
                # –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
                await asyncio.to_thread(delete_and_insert_reactions,
                                        user_tg_id,
                                        current_user_id)

                # —É–¥–∞–ª—è–µ–º –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data
                data.pop(page)

                # –µ—Å–ª–∏ False (data –ø—É—Å—Ç–∞—è)
                if not data:

                    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
                    text_info = '<b>–°–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –ø—É—Å—Ç</b> ü§∑‚Äç‚ôÇÔ∏è'
                    await back_callback(callback.message,
                                        user_tg_id,
                                        'back_reactions',
                                        text_info)

                # –µ—Å–ª–∏ True (data –Ω–µ –ø—É—Å—Ç–∞—è)
                else:

                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if page >= len(data):

                        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                        page = len(data) - 1

                    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await load_pagination(callback.message,
                                          data,
                                          keyboard,
                                          list_type,
                                          page)
            else:

                await asyncio.to_thread(insert_reaction, user_tg_id, current_user_id)
                await bot_send_message_about_like(user_tg_id, current_user_id, bot)
                await callback.message.edit_media(media=InputMediaPhoto(
                    media=delete_profile_id,
                    caption=(
                        '<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b> ü´§\n\n'
                        '<b>–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ —É–¥–∞–ª–∏–ª —Å–≤–æ—é —Ä–µ–∞–∫—Ü–∏—é</b> üòî\n\n'
                        '<i>–ù–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –µ–º—É –≤–∞—à—É üòâ</i>'
                    ),
                    parse_mode='HTML'
                ),
                    reply_markup=kb.error_add_to_contacts
                )

        # –æ—Ç–∫–∞–∑ –æ—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ "–í—Ö–æ–¥—è—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏"
        elif callback_data.action == 'delete_incoming':

            # —É–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∏–∑ –±–¥ –∏ –≤—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            # –ø–µ—Ä–µ–¥–∞—é id –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            delete = await asyncio.to_thread(delete_reaction, current_user_id, user_tg_id)

            if delete:
                # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ ignorelist
                await asyncio.to_thread(send_user_to_ignore_table, user_tg_id, current_user_id)
                await bot_notification_about_dislike(callback.message,
                                                     '‚ùóÔ∏è <b>–†–µ–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>\n'
                                                     '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª:\n'
                                                     '"üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>"')

                # —É–¥–∞–ª—è–µ–º –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data
                data.pop(page)

                # –µ—Å–ª–∏ False (data –ø—É—Å—Ç–∞—è)
                if not data:

                    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
                    text_info = '<b>–°–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∞–∫—Ü–∏–π –ø—É—Å—Ç</b> ü§∑‚Äç‚ôÇÔ∏è'
                    await back_callback(callback.message,
                                        user_tg_id,
                                        'back_reactions',
                                        text_info)

                # –µ—Å–ª–∏ True (data –Ω–µ –ø—É—Å—Ç–∞—è)
                else:

                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if page >= len(data):

                        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                        page = len(data) - 1

                    # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await load_pagination(callback.message,
                                          data,
                                          keyboard,
                                          list_type,
                                          page)
            else:
                await bot_notification_about_dislike(callback.message,
                                                     'üöß <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</b> üöß')

        # –æ—Ç–º–µ–Ω–∞ –º–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ "–ú–æ–∏ —Ä–µ–∞–∫—Ü–∏–∏"
        elif callback_data.action == 'in_reactions_dislike':

            # —É–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∏–∑ –±–¥ –∏ –≤—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await asyncio.to_thread(delete_reaction, user_tg_id, current_user_id)
            await bot_notification_about_dislike(callback.message,
                                                 'üö´ <b>–†–µ–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>')

            # —É–¥–∞–ª—è–µ–º –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data
            data.pop(page)

            # –µ—Å–ª–∏ False (data –ø—É—Å—Ç–∞—è)
            if not data:

                # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
                text_info = '<b>–°–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –ø—É—Å—Ç</b> ü§∑‚Äç‚ôÇÔ∏è'
                await back_callback(callback.message,
                                    user_tg_id,
                                    'back_reactions',
                                    text_info)

            # –µ—Å–ª–∏ True (data –Ω–µ –ø—É—Å—Ç–∞—è)
            else:

                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if page >= len(data):

                    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                    page = len(data) - 1

                # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await load_pagination(callback.message,
                                      data,
                                      keyboard,
                                      list_type,
                                      page)

        # —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
        elif callback_data.action == 'delete_contact':

            # —É–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∏–∑ –±–¥ (matchreactions) –∏ –≤—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            delete = await asyncio.to_thread(delete_from_my_contacts, user_tg_id, current_user_id)

            if delete:
                # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ ignorelist
                await asyncio.to_thread(send_user_to_ignore_table, user_tg_id, current_user_id)
                await bot_notification_about_dislike(callback.message,
                                                     '‚ùóÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n'
                                                     '–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª:\n'
                                                     '"üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>"')

                # —É–¥–∞–ª—è–µ–º –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data
                data.pop(page)

                # –µ—Å–ª–∏ False (data –ø—É—Å—Ç–∞—è)
                if not data:

                    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
                    text_info = '<b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç</b> ü§∑‚Äç‚ôÇÔ∏è'
                    await back_callback(callback.message,
                                        user_tg_id,
                                        'back_reactions',
                                        text_info)

                # –µ—Å–ª–∏ True (data –Ω–µ –ø—É—Å—Ç–∞—è)
                else:

                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if page >= len(data):

                        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                        page = len(data) - 1

                    # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await load_pagination(callback.message,
                                          data,
                                          keyboard,
                                          list_type,
                                          page)
            else:
                await bot_notification_about_dislike(callback.message,
                                                     'üöß –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üöß')

        # —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        elif callback_data.action == 'remove_from_ignore':

            # —É–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∏–∑ –±–¥ (matchreactions) –∏ –≤—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            delete = await asyncio.to_thread(remove_user_from_ignore_table, user_tg_id, current_user_id)

            if delete:

                await bot_notification_about_dislike(callback.message,
                                                     '‚ò∫Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–æ–∏—Å–∫–µ!</b>')

                # —É–¥–∞–ª—è–µ–º –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data
                data.pop(page)

                # –µ—Å–ª–∏ False (data –ø—É—Å—Ç–∞—è)
                if not data:

                    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
                    text_info = '<b>–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> üôÉ'
                    await back_callback(callback.message,
                                        user_tg_id,
                                        'back_reactions',
                                        text_info)

                # –µ—Å–ª–∏ True (data –Ω–µ –ø—É—Å—Ç–∞—è)
                else:

                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if page >= len(data):

                        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                        page = len(data) - 1

                    # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await load_pagination(callback.message,
                                          data,
                                          keyboard,
                                          list_type,
                                          page)
            else:
                await bot_notification_about_dislike(callback.message,
                                                     'üöß <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</b> üöß')

        # –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        else:
            try:
                # —É–±–∏—Ä–∞–µ—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å

                with suppress(TelegramBadRequest):

                    # –ø—Ä–æ–≤–µ—Ä–∫–∞ list_type –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    # –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

                    await load_pagination(callback.message,
                                          data,
                                          keyboard,
                                          list_type,
                                          page)

            except:
                pass

    await callback.answer()
