import asyncio
from config import delete_profile_id
from aiogram import Bot
from aiogram.types import CallbackQuery, InputMediaPhoto
from aiogram import F, Router
from src.modules.get_self_data import get_user_info
from src.database.requests.user_data import get_self_data
from src.modules.notifications import attention_message

from src.database.requests.likes_users import (insert_reaction,
                                               get_reaction,
                                               delete_and_insert_reactions)

import src.modules.keyboard as kb


router = Router()


# –í—Ö–æ–¥—è—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∞–∫—Ü–∏–∏


# –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é
@router.callback_query(F.data.startswith('accept_request:'))
async def accept_incoming_request_alert(callback: CallbackQuery, bot: Bot):

    user_tg_id = callback.from_user.id
    current_user_id = callback.data.split(':')[1]
    check = await asyncio.to_thread(get_reaction, current_user_id, user_tg_id)

    if check:
        await asyncio.to_thread(insert_reaction, user_tg_id, current_user_id)
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –±–µ—Å–µ–¥—ã
        await bot_send_message_matchs_likes(user_tg_id,
                                            current_user_id,
                                            bot)

        # —É–¥–∞–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã userreactions –∏
        # –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É matchreactions
        # –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
        await asyncio.to_thread(delete_and_insert_reactions,
                                user_tg_id,
                                current_user_id)

        await callback.message.delete()

    else:
        await asyncio.to_thread(insert_reaction, user_tg_id, current_user_id)
        await bot_send_message_about_like(user_tg_id, current_user_id, bot)
        await callback.message.edit_media(media=InputMediaPhoto(
            media=delete_profile_id,
            caption=(
                '<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b> ü´§\n\n'
                '<b>–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ —É–¥–∞–ª–∏–ª —Å–≤–æ—é —Ä–µ–∞–∫—Ü–∏—é</b> üòî\n\n'
                '<i>–ù–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –µ–º—É –≤–∞—à—É üòâ</i>'
            ),
            parse_mode='HTML'
        ),
            reply_markup=kb.error_add_to_contacts
        )


# –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ –ø–æ—Ç–æ–º
@router.callback_query(F.data.startswith('accept_late:'))
async def accept_late_incoming_request_alert(callback: CallbackQuery):
    user_tg_id = callback.from_user.id
    current_user_id = callback.data.split(':')[1]
    check = await asyncio.to_thread(get_reaction, current_user_id, user_tg_id)

    if check:
        await notification_to_late_incoming_reaction(callback.message)
    else:
        await callback.message.edit_media(media=InputMediaPhoto(
            media=delete_profile_id,
            caption=(
                '<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b> ü´§\n\n'
                '<b>–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Ä–µ–∞–∫—Ü–∏—é\n'
                '–∏ —É–∂–µ —É–¥–∞–ª–∏–ª –µ–µ</b> ü§∑‚Äç‚ôÇÔ∏è'
            ),
            parse_mode='HTML'
        ),
            reply_markup=kb.error_add_to_contacts
        )


# –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@router.callback_query(F.data == 'close_notification')
async def close_notice(callback: CallbackQuery):
    await callback.message.delete()


# –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–†–µ—à—É –ø–æ–∑–∂–µ" –Ω–∞ –≤—Ö–æ–¥—è—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ
async def notification_to_late_incoming_reaction(message):

    await message.delete()
    await attention_message(message, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª\n"‚û°Ô∏è <b>–í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã</b>"', 3)


# –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏
async def bot_notification_about_like(message):
    temporary_message = await message.answer('üì¨ –†–µ–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                                             parse_mode='HTML')
    await asyncio.sleep(1)
    await temporary_message.delete()


# –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —Ä–µ–∞–∫—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –≤–∑–∞–∏–º–Ω–æ)
async def bot_notification_about_dislike(message, text):
    temporary_message = await message.answer(f'{text}', parse_mode='HTML')
    await asyncio.sleep(2)
    await temporary_message.delete()


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä–æ–≥–æ "–ª–∞–π–∫–Ω—É–ª–∏"
async def bot_send_message_about_like(user_tg_id, current_user_id, bot):

    # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
    user_info = await get_user_info(user_tg_id)

    # –ò–∑–≤–ª–µ–∫–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
    self_data = user_info['data']
    self_gender = user_info['gender']
    self_hobbies = user_info['hobbies']

    await bot.send_photo(chat_id=current_user_id,
                         photo=f'{self_data[0][1]}',
                         caption=(
                             '<b>–£ –≤–∞—Å –Ω–æ–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n'
                             f'<b>–ò–º—è:</b> {self_data[0][0]}\n'
                             f'<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {self_data[0][4]}\n'
                             f'<b>–ü–æ–ª:</b> {self_gender}\n'
                             f'<b>–ì–æ—Ä–æ–¥:</b> {self_data[0][5]}\n'
                             f'<b>–£–≤–ª–µ—á–µ–Ω–∏—è:</b> {self_hobbies}'
                         ),
                         parse_mode='HTML',
                         reply_markup=kb.incoming_request_reaction(user_tg_id))


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
async def bot_send_message_matchs_likes(user_tg_id, current_user_id, bot):

    self_data = await asyncio.to_thread(get_self_data, user_tg_id)
    current_user_data = await asyncio.to_thread(get_self_data, current_user_id)

    self_nickname = self_data[0][2]
    current_user_nickname = current_user_data[0][2]

    # –°–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –±–µ—Å–µ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É, –ö–û–ú–£ –û–¢–í–ï–¢–ò–õ–ò –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é

    await bot.send_photo(chat_id=current_user_id,
                         photo=f'{self_data[0][1]}',
                         caption=(
                             '–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! üéâ\n'
                             f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self_data[0][0]} –æ—Ç–≤–µ—Ç–∏–ª '
                             '–Ω–∞ –≤–∞—à—É —Ä–µ–∞–∫—Ü–∏—é –∏ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '
                             '<b>"–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"</b>\n\n'
                             '‚úâÔ∏è <i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ª–∏—á–Ω—É—é –±–µ—Å–µ–¥—É.</i>'
                         ),
                         parse_mode='HTML',
                         reply_markup=kb.match_reactions(self_nickname))

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª –≤ –æ—Ç–≤–µ—Ç (–º–Ω–µ)

    await bot.send_photo(chat_id=user_tg_id,
                         photo=f'{current_user_data[0][1]}',
                         caption=(
                             f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user_data[0][0]} '
                             '–¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª <b>"–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"</b>\n\n'
                             '‚úâÔ∏è <i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ª–∏—á–Ω—É—é –±–µ—Å–µ–¥—É.</i>'
                         ),
                         parse_mode='HTML',
                         reply_markup=kb.match_reactions(current_user_nickname))
