import asyncio
from aiogram.types import CallbackQuery
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from src.modules.pagination_logic import (back_callback,
                                          load_pagination_start_or_end_data)

from src.database.requests.likes_users import get_matches_users_data
from src.modules.notifications import attention_message


router = Router()


# –í–∑–∞–∏–º–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ (–º–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã)
@router.callback_query(F.data == 'match_reactions_list')
async def my_reactions(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    data = await asyncio.to_thread(get_matches_users_data, user_tg_id)

    # –µ—Å–ª–∏ False (–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
    if not data:

        # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
        text_info = '<b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç</b> üòî'
        await back_callback(callback.message,
                            user_tg_id,
                            'back_reactions',
                            'reactions',
                            text_info)

    # –µ—Å–ª–∏ True (–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    else:

        total_pages = len(data)

        # –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –≤—Å–µ–≥–æ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if total_pages == 1:
            text_info = '\n\n<code>–í —Å–ø–∏—Å–∫–µ –≤—Å–µ–≥–æ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</code>'
        else:
            text_info = ''

        await load_pagination_start_or_end_data(callback.message,
                                                data,
                                                'match_reactions_pagination',
                                                'match_like_users',
                                                total_pages,
                                                text_info)

        await state.update_data(users_data=data)
