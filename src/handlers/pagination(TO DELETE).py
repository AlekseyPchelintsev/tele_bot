'''
import asyncio
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram import F, Router, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from contextlib import suppress
from config import delete_profile_id, in_progress
from aiogram.exceptions import TelegramBadRequest
from src.modules.pagination_logic import no_data_after_reboot_bot, back_callback, load_pagination, load_pagination_bot
from src.modules.notifications import (loader,
                                       attention_message,
                                       bot_notification_about_like,
                                       bot_send_message_about_like,
                                       bot_send_message_matchs_likes)

from src.modules.delete_messages import del_last_message
from src.database.requests.user_data import get_all_users_data
from src.modules.get_self_data import get_user_info
from src.handlers.edit_name import check_emodji
from src.database.requests.search_users import (check_users_in_city,
                                                get_stemmed_hobbies_list,
                                                check_users_by_hobbies,
                                                search_users)

from src.handlers.edit_hobbies import wrong_search_hobby_name
from src.handlers.edit_city import wrong_search_city_name
from src.database.requests.likes_users import (insert_reaction,
                                               delete_and_insert_reactions,
                                               check_matches_two_users)
import src.modules.keyboard as kb


router = Router()


class Registration(StatesGroup):
    search_city = State()
    search_hobby = State()


delete_messages = []
delete_last_message = []


# –ú–µ–Ω—é "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"


@router.callback_query(F.data == 'users')
async def check_users_menu(callback: CallbackQuery, state: FSMContext):

    # –ø–æ–ª—É—á–∞—é —Å–≤–æ–π id
    user_tg_id = callback.from_user.id

    # –æ—á–∏—â–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ)
    await state.clear()

    # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    user_info = await get_user_info(user_tg_id)

    # –∏–∑–≤–ª–µ–∫–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    self_data = user_info['data']

    try:
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=f'{self_data[0][1]}',
                caption=(
                    'üîé <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:</b>'
                ),
                parse_mode='HTML'
            ),
            reply_markup=kb.users_menu
        )
    except:
        await callback.message.answer_photo(
            photo=f'{self_data[0][1]}',
            caption=(
                'üîé <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:</b>'
            ),
            parse_mode='HTML',
            reply_markup=kb.users_menu
        )


# –æ—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞


@router.callback_query(F.data.in_(['advanced_search', 'all_users']))
async def search_users_menu(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    data = callback.data

    # –¥–æ–±–∞–≤–ª—è—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏–µ –∏–Ω—Ñ—É –æ –≤—ã–±—Ä–∞–Ω–æ–º –º–µ–Ω—é —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–∞–ª–µ–µ
    await state.update_data(type_of_search=data)

    # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    user_info = await get_user_info(user_tg_id)

    # –ò–∑–≤–ª–µ–∫–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    self_data = user_info['data']

    # –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=f'{self_data[0][1]}',
                caption=(
                    '\n\n<b>üîé –ö–æ–≥–æ –∏—â–µ–º?</b>'
                ),
                parse_mode='HTML'
            ),
            reply_markup=kb.gender_search
        )
    except:
        await callback.message.answer_photo(
            photo=f'{self_data[0][1]}',
            caption=(
                '\n\n<b>üîé –ö–æ–≥–æ –∏—â–µ–º?</b>'
            ),
            parse_mode='HTML',
            reply_markup=kb.gender_search
        )


# –í—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@router.callback_query(F.data.in_(['male-search', 'female-search', 'all-search']))
async def choise_gender_for_search(callback: CallbackQuery, state: FSMContext):

    print(f'–í–´–ë–†–ê–ù –ü–û–õ: {callback.data}')

    data = await state.get_data()
    search_data = data.get('type_of_search')
    gender_data = callback.data

    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ callback.data –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –¥—Ä—É–≥–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if gender_data == 'male-search':
        gender_data = 'male'
    elif gender_data == 'female-search':
        gender_data = 'female'
    elif gender_data == 'all-search':
        gender_data = 'all'

    if search_data == 'all_users':
        await search_all_users(callback, state, gender_data)
    elif search_data == 'advanced_search':
        await state.update_data(type_of_gender=gender_data)
        await serach_users_by_city(callback, state)


# ================================
# –ü–û–ò–°–ö –õ–Æ–î–ï–ô –ü–û –ì–û–†–û–î–ê–ú         |
# ================================


async def serach_users_by_city(callback, state):

    user_tg_id = callback.from_user.id

    # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    user_info = await get_user_info(user_tg_id)
    city_data = user_info['data'][0][5]

    edit_message = await callback.message.edit_media(
        media=InputMediaPhoto(
            media=f'{in_progress}',
            caption=(
                '\nüîé <b>–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ?</b>'
                '\n\nüìåüí¨ –ü—Ä–∏—à–ª–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b> –≤ —á–∞—Ç'
                '\n\nüìå‚å®Ô∏è –∏–ª–∏ <b>–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
            ),
            parse_mode='HTML'
        ),
        reply_markup=kb.search_in_city(city_data)
    )

    await state.update_data(message_id=edit_message.message_id)
    await state.set_state(Registration.search_city)


# –ø–æ–∏—Å–∫ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –≤ –ª—é–±–æ–º


@router.callback_query(F.data.in_(['home_city', 'all_cities']))
async def search_in_city(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    search_data = callback.data

    # –ø–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    search_gender = await state.get_data()
    gender_data = search_gender.get('type_of_gender')

    if search_data == 'home_city':

        # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
        user_info = await get_user_info(user_tg_id)

        # –ò–∑–≤–ª–µ–∫–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        city_data = user_info['data'][0][5]

        print(f'–í–´–ë–†–ê–ù –ü–û–ò–°–ö –í –ú–û–ï–ú –ì–û–†–û–î–ï')
        print(f'–î–ê–ù–ù–´–ï –ì–û–†–û–î–ê: {city_data}, –ü–û–õ–ê:{gender_data}')

        # –ø—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –ø–æ–ª—É –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ
        check_home_city_users = await asyncio.to_thread(check_users_in_city,
                                                        user_tg_id,
                                                        city_data,
                                                        gender_data)

        if check_home_city_users:

            print(f'–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í –ú–û–ï–ú –ì–û–†–û–î–ï –ü–û –ü–û–õ–£ –ù–ê–ô–î–ï–ù–´')

            # –¥–æ–±–∞–≤–ª—è—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
            await state.update_data(city_users=city_data)
            await search_users_by_hobby(callback, state)

        else:

            print(f'–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í –ú–û–ï–ú –ì–û–†–û–î–ï –ü–û –ü–û–õ–£ –ù–ï –ù–ê–ô–î–ï–ù–´')

            try:
                await callback.message.edit_media(
                    media=InputMediaPhoto(
                        media=f'{in_progress}',
                        caption=(
                            '\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b> üòî'
                            '\n\nüìå‚å®Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç <b>"–ù–µ –≤–∞–∂–Ω–æ"</b> '
                            '—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö'
                            '\n\nüìåüí¨ –∏–ª–∏ <b>–ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç</b> –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, '
                            '—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤ –Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:'
                        ),
                        parse_mode='HTML'
                    ),
                    reply_markup=kb.search_in_city(city_data)
                )
            except:
                await callback.message.answer_photo(
                    photo=f'{in_progress}',
                    caption=(
                        '\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b> üòî'
                        '\n\nüìå‚å®Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç <b>"–ù–µ –≤–∞–∂–Ω–æ"</b> '
                        '—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö'
                        '\n\nüìåüí¨ –∏–ª–∏ <b>–ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç</b> –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, '
                        '—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤ –Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:'
                    ),
                    parse_mode='HTML',
                    reply_markup=kb.search_in_city(city_data)
                )
            await state.set_state(Registration.search_city)

    elif search_data == 'all_cities':

        print('–í–´–ë–†–ê–ù –ü–û–ò–°–ö –ü–û –í–°–ï–ú –ì–û–†–û–î–ê–ú')

        await state.update_data(city_users='all')
        await search_users_by_hobby(callback, state)


# –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≥–æ—Ä–æ–¥—É


@router.message(Registration.search_city)
async def search_by_city(message: Message, state: FSMContext, bot: Bot):

    print(f'–ù–ê–ó–í–ê–ù–ò–ï –ì–û–†–û–î–ê –û–¢–ü–†–ê–í–õ–ï–ù–û –í –ß–ê–¢')

    user_tg_id = message.from_user.id

    # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    user_info = await get_user_info(user_tg_id)
    # –ò–∑–≤–ª–µ–∫–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
    city_data = user_info['data'][0][5]

    # —É–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç
    await del_last_message(message)

    # –ø–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    search_gender = await state.get_data()
    gender_data = search_gender.get('type_of_gender')

    # –ø–æ–ª—É—á–∞—é id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_message = await state.get_data()
    message_id = edit_message.get('message_id')

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –∞ –Ω–µ –º–µ–¥–∏–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–¥.)
    if message.content_type == 'text':
        city_name = message.text.title()

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–º–∞–π–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        emodji_checked = await check_emodji(city_name)

        if not emodji_checked:
            await wrong_search_city_name(user_tg_id, message_id, bot)
            return

        # –ø—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–ª–æ–≤–∏—è–º
        check_users_city = await asyncio.to_thread(check_users_in_city,
                                                   user_tg_id,
                                                   city_name,
                                                   gender_data)

        if check_users_city:

            await bot.edit_message_media(
                chat_id=user_tg_id,
                message_id=message_id,
                media=InputMediaPhoto(
                    media=f'{in_progress}',
                    caption=(
                        '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                        '\n\nüìåüí¨ –ü—Ä–∏—à–ª–∏—Ç–µ <b>—É–≤–ª–µ—á–µ–Ω–∏–µ</b> –≤ —á–∞—Ç'
                        '\n\nüìå‚å®Ô∏è –∏–ª–∏ <b>–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
                    ),
                    parse_mode='HTML'
                ),
                reply_markup=kb.hobbies_search
            )

            await state.update_data(city_users=city_name)
            await state.set_state(Registration.search_hobby)

        else:

            await bot.edit_message_media(
                chat_id=user_tg_id,
                message_id=message_id,
                media=InputMediaPhoto(
                    media=f'{in_progress}',
                    caption=(
                        '\nüîé <b>–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ?</b>'
                        f'\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ <b>"{city_name}"</b> '
                        '<u>–Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</u>'
                        '\n\nüìåüí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤ <b>–¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö</b>'
                        '\n\nüìå‚å®Ô∏è –∏–ª–∏ <b>–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
                    ),
                    parse_mode='HTML'
                ),
                reply_markup=kb.search_in_city(city_data)
            )
    else:
        await wrong_search_city_name(user_tg_id, message_id, bot)
        return


# ================================
# –ü–û–ò–°–ö –õ–Æ–î–ï–ô –ü–û –•–û–ë–ë–ò           |
# ================================


async def search_users_by_hobby(callback, state):

    print(f'–ó–ê–ì–†–£–ñ–ï–ù–û –ú–ï–ù–Æ –ü–û–ò–°–ö –ü–û –•–û–ë–ë–ò')

    edit_message = await callback.message.edit_media(
        media=InputMediaPhoto(
            media=f'{in_progress}',
            caption=(
                '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                '\n\nüìåüí¨ –ü—Ä–∏—à–ª–∏—Ç–µ <b>—É–≤–ª–µ—á–µ–Ω–∏–µ</b> –≤ —á–∞—Ç'
                '\n\nüìå‚å®Ô∏è –∏–ª–∏ <b>–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
            ),
            parse_mode='HTML'
        ),
        reply_markup=kb.hobbies_search
    )

    await state.update_data(message_id=edit_message.message_id)
    await state.set_state(Registration.search_hobby)


# –ø–æ –º–æ–∏–º —Ö–æ–±–±–∏ –∏–ª–∏ –ø–æ –ª—é–±—ã–º


@router.callback_query(F.data.in_(['my_hobbies', 'all_hobbies']))
async def my_hobbies_or_all(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    search_data = callback.data

    # –ø–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data_state = await state.get_data()
    gender_data = data_state.get('type_of_gender')
    city_data = data_state.get('city_users')

    if search_data == 'my_hobbies':

        print(f'–í–´–ë–†–ê–ù –ü–û–ò–°–ö –ü–û –ú–û–ò–ú –•–û–ë–ë–ò')
        print(f'–î–ê–ù–ù–´–ï –í –°–û–°–¢–û–Ø–ù–ò–ò - –ü–û–õ: {gender_data}, –ì–û–†–û–î: {city_data}')

        # –ø–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Ö–æ–æ–±–∏ (–ø—Ä–æ–≥–æ–Ω—è—é —á–µ—Ä–µ–∑ —Å—Ç–µ–º–º–∏–Ω–≥) –∏ —É–¥–∞–ª—è—é —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        my_hobbies_data = await asyncio.to_thread(get_stemmed_hobbies_list, user_tg_id=user_tg_id)

        if not my_hobbies_data:

            try:
                await callback.message.edit_media(
                    media=InputMediaPhoto(
                        media=f'{in_progress}',
                        caption=(
                            '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                            '\n\n‚ùå <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏–π –ø—É—Å—Ç</b>'
                            '\n\n–î–æ–±–∞–≤—Ç—å–µ —É–≤–ª–µ—á–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ '
                            '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '
                            '–≤—ã–±—Ä–∞–≤ –≤–∞—Ä–∏–∞–Ω—Ç <b>"–ù–µ –≤–∞–∂–Ω–æ"</b>...'
                            '\n\nüìåüí¨ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è</b> –≤ —á–∞—Ç'
                        ),
                        parse_mode='HTML'
                    ),
                    reply_markup=kb.hobbies_search
                )
            except:
                await callback.message.answer_photo(
                    photo=f'{in_progress}',
                    caption=(
                        '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                        '\n\n‚ùå <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏–π –ø—É—Å—Ç</b>'
                        '\n\n–î–æ–±–∞–≤—Ç—å–µ —É–≤–ª–µ—á–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ '
                        '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '
                        '–≤—ã–±—Ä–∞–≤ –≤–∞—Ä–∏–∞–Ω—Ç <b>"–ù–µ –≤–∞–∂–Ω–æ"</b>...'
                        '\n\nüìåüí¨ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è</b> –≤ —á–∞—Ç'
                    ),
                    parse_mode='HTML',
                    reply_markup=kb.hobbies_search
                )
            await state.set_state(Registration.search_hobby)

        else:

            print(f'–ú–û–ò –•–û–ë–ë–ò: {my_hobbies_data}')

            # –ø–æ–≤–µ—Ä—è—é –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ö–æ–±–±–∏ —É "–º–µ–Ω—è"
            check_users_by_my_hobbies = await asyncio.to_thread(check_users_by_hobbies,
                                                                user_tg_id,
                                                                gender_data,
                                                                city_data,
                                                                my_hobbies_data)

            print(f'–†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –ü–û–ò–°–ö–ê –ü–û –ú–û–ò–ú –•–û–ë–ë–ò '
                  f'{check_users_by_my_hobbies}')

            if check_users_by_my_hobbies:

                data = await asyncio.to_thread(search_users,
                                               user_tg_id,
                                               gender_data,
                                               city_data,
                                               my_hobbies_data)

                await state.clear()

                await loader(callback.message, '–°–µ–∫—É–Ω–¥—É, –∑–∞–≥—Ä—É–∂–∞—é ü§î')

                await load_pagination(callback.message,
                                      data,
                                      'paginator',
                                      'hobbies_users')

                await state.update_data(users_data=data)

            else:
                try:
                    await callback.message.edit_media(
                        media=InputMediaPhoto(
                            media=f'{in_progress}',
                            caption=(
                                '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                                '\n\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å —Å—Ö–æ–∂–∏–º–∏ '
                                '—É–≤–ª–µ—á–µ–Ω–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî</b>'
                                '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '
                                '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>–≥–æ—Ä–æ–¥</b> –∏–ª–∏ <b>–ø–æ–ª</b>.'
                                '\n\nüìå‚å®Ô∏è –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ <b>–≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
                                '\n\nüìåüí¨ –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è</b> –≤ —á–∞—Ç'

                            ),
                            parse_mode='HTML'
                        ),
                        reply_markup=kb.hobbies_search
                    )
                except:
                    await callback.message.answer_photo(
                        photo=f'{in_progress}',
                        caption=(
                            '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                            '\n\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å —Å—Ö–æ–∂–∏–º–∏ '
                            '—É–≤–ª–µ—á–µ–Ω–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî</b>'
                            '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '
                            '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>–≥–æ—Ä–æ–¥</b> –∏–ª–∏ <b>–ø–æ–ª</b>.'
                            '\n\nüìå‚å®Ô∏è –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ <b>–≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
                            '\n\nüìåüí¨ –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è</b> –≤ —á–∞—Ç'
                        ),
                        parse_mode='HTML',
                        reply_markup=kb.hobbies_search
                    )
                await state.set_state(Registration.search_hobby)

    elif search_data == 'all_hobbies':

        print(f'–í–´–ë–†–ê–ù –ü–û–ò–°–ö –ü–û –í–°–ï–ú –•–û–ë–ë–ò (–ù–ï –í–ê–ñ–ù–û)')
        print(f'–î–ê–ù–ù–´–ï –í –°–û–°–¢–û–Ø–ù–ò–ò - –ü–û–õ: {gender_data}, –ì–û–†–û–î: {city_data}')

        try:
            hobbies_data = ['all']

            data = await asyncio.to_thread(search_users,
                                           user_tg_id,
                                           gender_data,
                                           city_data,
                                           hobbies_data)

            await state.clear()
            await loader(callback.message, '–°–µ–∫—É–Ω–¥—É, –∑–∞–≥—Ä—É–∂–∞—é ü§î')
            await load_pagination(callback.message,
                                  data,
                                  'paginator',
                                  'hobbies_users')

            await state.update_data(users_data=data)

        except:

            await search_all_users(callback, state, gender_data)


# –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ö–æ–±–±–∏


@router.message(Registration.search_hobby)
async def search_by_hobby(message: Message, state: FSMContext, bot: Bot):
    await del_last_message(message)

    print(f'–Ø –û–¢–ü–†–ê–í–ò–õ –•–û–ë–ë–ò –í –ß–ê–¢')

    user_tg_id = message.from_user.id
    data_state = await state.get_data()
    gender_data = data_state.get('type_of_gender')
    city_data = data_state.get('city_users')

    edit_message = await state.get_data()
    message_id = edit_message.get('message_id')

    if message.content_type == 'text':
        request = message.text.lower()

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–º–∞–π–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        emodji_checked = await check_emodji(request)

        if not emodji_checked:
            await wrong_search_hobby_name(user_tg_id, message_id, bot)
            return

        # —Å—Ç–µ–º–º–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤
        stemmed_words = await asyncio.to_thread(get_stemmed_hobbies_list, hobby_name=request)

        print(f'–•–û–ë–ë–ò –ü–†–û–®–õ–û –í–°–ï –ü–†–û–í–ï–†–ö–ò')
        print(f'–í–´–ë–†–ê–ù–ù–´–ô –ì–û–†–û–î: {city_data}\n–í–´–ë–†–ê–ù–ù–´–ô –ü–û–õ: '
              f'{gender_data}\n–•–û–ë–ë–ò –î–õ–Ø –ü–û–ò–°–ö–ê: {stemmed_words}')

        # –ø–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –∑–∞–ø—Ä–æ—Å–∞
        check_users_by_my_hobbies = await asyncio.to_thread(check_users_by_hobbies,
                                                            user_tg_id,
                                                            gender_data,
                                                            city_data,
                                                            stemmed_words)

        if check_users_by_my_hobbies:

            # –ø–æ–ª—É—á–∞—é –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            data = await asyncio.to_thread(search_users,
                                           user_tg_id,
                                           gender_data,
                                           city_data,
                                           stemmed_words)

            print(f'–ó–ê–ì–†–£–ó–ö–ê –ü–ê–ì–ò–ù–ê–¶–ò–ò –° –î–ê–ù–ù–´–ú–ò: {data}')

            await state.clear()

            await loader(message, '–°–µ–∫—É–Ω–¥—É, –∑–∞–≥—Ä—É–∂–∞—é ü§î')

            await load_pagination_bot(bot,
                                      user_tg_id,
                                      message_id,
                                      data,
                                      'paginator',
                                      'hobbies_users')

            await state.update_data(users_data=data)

        else:

            print(f'–°–†–ê–ë–û–¢–ê–õ–û –£–°–õ–û–í–ò–ï –ï–°–õ–ò –ù–ï–¢ –°–û–í–ü–ê–î–ï–ù–ò–ô –ü–û –•–û–ë–ë–ò: '
                  f'{stemmed_words}')

            await bot.edit_message_media(
                chat_id=user_tg_id,
                message_id=message_id,
                media=InputMediaPhoto(
                    media=f'{in_progress}',
                    caption=(
                        '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                        '\n\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º–∏ —É–≤–ª–µ—á–µ–Ω–∏—è–º–∏ –≤ –¥–∞–Ω–Ω–æ–º '
                        '–≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b> üòî'
                        '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '
                        '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>–≥–æ—Ä–æ–¥</b> –∏–ª–∏ <b>–ø–æ–ª</b>.'
                        '\n\nüìå‚å®Ô∏è –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ <b>–≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
                        '\n\nüìåüí¨ –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–¥—Ä—É–≥–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ</b> –≤ —á–∞—Ç:'
                    ),
                    parse_mode='HTML'
                ),
                reply_markup=kb.hobbies_search
            )

    else:
        await wrong_search_hobby_name(user_tg_id, message_id, bot)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


async def search_all_users(callback, state, gender_data):

    user_tg_id = callback.from_user.id

    # –ø–ª—É—á–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    user_info = await get_user_info(user_tg_id)

    # –ò–∑–≤–ª–µ–∫–∞—é —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    self_data = user_info['data']

    try:

        # –ø–æ–ª—É—á–∞—é –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        data = await asyncio.to_thread(get_all_users_data, user_tg_id, gender_data)

    except Exception as e:
        print(f'SHOW ALL USERS ERROR: {e}')

    if data:
        await loader(callback.message, '–°–µ–∫—É–Ω–¥—É, –∑–∞–≥—Ä—É–∂–∞—é ü§î')
        await load_pagination(callback.message,
                              data,
                              'paginator',
                              'all_users')

        await state.update_data(users_data=data)

    else:

        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=InputMediaPhoto(
                    media=f'{self_data[0][1]}',
                    caption=(
                        '\n\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>'
                        '\n\nüîé –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.'
                    ),
                    parse_mode='HTML'
                ),
                reply_markup=kb.gender_search
            ))


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@ router.callback_query(
    kb.Pagination.filter(F.action.in_(
        ['prev',
         'next',
         'menu',
         'like']
    ))
)
async def pagination_handler(
    callback: CallbackQuery,
    callback_data: kb.Pagination,
    state: FSMContext,
    bot: Bot
):
    user_tg_id = callback.message.chat.id
    list_type = callback_data.list_type

    data = (await state.get_data()).get('users_data')

    # –µ—Å–ª–∏ –±–æ—Ç —É—à–µ–ª –≤ —Ä–µ–±—É—Ç —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not data:
        await no_data_after_reboot_bot(callback)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ data –Ω–µ None
    else:
        page_num = int(callback_data.page)

        # –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ UnboundLocalError –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—á–∏–ª–∏—Å—å
        page = page_num

        # –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥" –∏ "–Ω–∞–∑–∞–¥" —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ –Ω–∞—á–∞–ª–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞
        if callback_data.action == 'prev':

            if page_num == 0:
                text_prev = '<b>–í—ã –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞</b>'
                await attention_message(callback.message, text_prev, 1)
            else:
                page = max(page_num - 1, 0)

        elif callback_data.action == 'next':

            if page_num + 1 < len(data):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                page = page_num + 1
            else:
                text_next = ('<b>–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å</b>üòî \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å '
                             '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
                await attention_message(callback.message, text_next, 3)
        else:
            page = page_num

        # –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        if callback_data.action == 'menu':

            # –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ç–µ–∫—Å—Ç –ø–æ–¥ –∏–Ω—Ñ–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π))
            await back_callback(callback.message, user_tg_id, 'users_menu')

        # –ª–∞–π–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif callback_data.action == 'like':

            current_user_id = data[page][0]

            # –ó–ê–í–ï–°–¢–ò –ü–†–û–í–ï–†–ö–£ –ï–°–õ–ò –ï–°–¢–¨ –í –í–•–û–î–Ø–©–ò–•

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–¥
            await asyncio.to_thread(insert_reaction, user_tg_id, current_user_id)

            # –ø–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏ –æ—Ç–≤–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ userreactions
            check = await asyncio.to_thread(check_matches_two_users, user_tg_id, current_user_id)

            # –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å
            if check:

                # —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ userreactions –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ matchreactions
                await asyncio.to_thread(delete_and_insert_reactions, user_tg_id, current_user_id)

                # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                await bot_send_message_matchs_likes(user_tg_id, current_user_id, bot, callback)

            # –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ö–æ–¥—è—â–µ–π —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not check:

                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot_send_message_about_like(user_tg_id, current_user_id, bot)

                # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è "–º–µ–Ω—è"
                await bot_notification_about_like(callback.message, f'{data[page][1]}')

            # —É–¥–∞–ª—è–µ–º –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data
            data.pop(page)

            # –µ—Å–ª–∏ False (data –ø—É—Å—Ç–∞—è)
            if not data:

                # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                text_info = '<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç</b> ü§∑‚Äç‚ôÇÔ∏è'
                await back_callback(callback.message,
                                    user_tg_id,
                                    'search_users',
                                    text_info)

            # –µ—Å–ª–∏ True (data –Ω–µ –ø—É—Å—Ç–∞—è)
            else:

                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if page >= len(data):

                    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                    page = len(data) - 1

                    # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
                await load_pagination(callback.message,
                                      data,
                                      'paginator',
                                      list_type,
                                      page)

        else:

            # —É–±–∏—Ä–∞–µ—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            with suppress(TelegramBadRequest):

                # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å
                await load_pagination(callback.message,
                                      data,
                                      'paginator',
                                      list_type,
                                      page)

    await callback.answer()
'''
