import asyncio
from aiogram.types import CallbackQuery
from aiogram import F, Router, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from src.handlers.reactions_menu.notice_reaction import bot_notification_about_like, bot_notification_about_dislike, bot_send_message_about_like, bot_send_message_matchs_likes
from src.modules.pagination_logic import (no_data_after_reboot_bot_reactions,
                                          back_callback,
                                          load_pagination_start_or_end_data)

from src.database.requests.likes_users import (insert_reaction,
                                               delete_and_insert_reactions,
                                               check_matches_two_users,
                                               send_user_to_ignore_table)

from src.modules.notifications import attention_message
import src.modules.keyboard as kb


router = Router()


class Registration(StatesGroup):
    search_city = State()
    search_hobby = State()


delete_messages = []
delete_last_message = []


# –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –ª–æ–≥–∏–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –∏–∑ –ø–æ–∏—Å–∫–∞
async def reload_pagination_after_hide_or_like(callback,
                                               user_tg_id,
                                               data,
                                               list_type,
                                               page):

    # —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data
    data.pop(page)

    # –µ—Å–ª–∏ False (data –ø—É—Å—Ç–∞—è)
    if not data:

        # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text_info = '<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç</b> ü§∑‚Äç‚ôÇÔ∏è'
        await back_callback(callback.message,
                            user_tg_id,
                            'search_users',
                            text_info)

    # –µ—Å–ª–∏ True (data –Ω–µ –ø—É—Å—Ç–∞—è)
    else:
        total_pages = len(data)
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page >= len(data):

            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
            page = len(data) - 1

            # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await load_pagination_start_or_end_data(callback.message,
                                                data,
                                                'paginator',
                                                list_type,
                                                total_pages,
                                                page=page)


# –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@ router.callback_query(
    kb.Pagination.filter(F.action.in_(
        ['prev',
         'next',
         'menu',
         'like',
         'hide']
    ))
)
async def pagination_handler(
    callback: CallbackQuery,
    callback_data: kb.Pagination,
    state: FSMContext,
    bot: Bot
):
    user_tg_id = callback.message.chat.id
    list_type = callback_data.list_type

    data = (await state.get_data()).get('users_data')

    # –µ—Å–ª–∏ –±–æ—Ç —É—à–µ–ª –≤ —Ä–µ–±—É—Ç —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
    if not data:
        await no_data_after_reboot_bot_reactions(callback, 'search_users')

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ data –Ω–µ None
    else:

        # –æ–±—â–∞—è –¥–ª–∏–Ω–Ω–∞ data –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        total_pages = len(data)

        page_num = int(callback_data.page)

        if callback_data.action == 'prev':
            page = max(page_num - 1, 0)
        elif callback_data.action == 'next':
            page = min(page_num + 1, len(data) - 1)
        else:
            page = page_num

        # –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        if callback_data.action == 'menu':

            # –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ç–µ–∫—Å—Ç –ø–æ–¥ –∏–Ω—Ñ–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π))
            menu_text = 'üîé <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:</b>'
            await back_callback(callback.message,
                                user_tg_id,
                                'users_menu',
                                'search',
                                menu_text)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é" –∏ "—Å–∫—Ä—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        elif callback_data.action in ['hide', 'like']:

            # id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ)
            current_user_id = data[page][0]

            # –ª–∞–π–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if callback_data.action == 'like':

                # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–¥
                await asyncio.to_thread(insert_reaction,
                                        user_tg_id,
                                        current_user_id)

                # –ø–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏ –æ—Ç–≤–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ userreactions
                check = await asyncio.to_thread(check_matches_two_users,
                                                user_tg_id,
                                                current_user_id)

                # –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å
                if check:

                    # —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ userreactions –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ matchreactions
                    await asyncio.to_thread(delete_and_insert_reactions,
                                            user_tg_id,
                                            current_user_id)

                    # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    await bot_send_message_matchs_likes(user_tg_id,
                                                        current_user_id,
                                                        bot)

                    # —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    await reload_pagination_after_hide_or_like(callback,
                                                               user_tg_id,
                                                               data,
                                                               list_type,
                                                               page)

                # –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ö–æ–¥—è—â–µ–π —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not check:

                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await bot_send_message_about_like(user_tg_id,
                                                      current_user_id,
                                                      bot)

                    # —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –±–µ–∑ –Ω–µ–≥–æ
                    await reload_pagination_after_hide_or_like(callback,
                                                               user_tg_id,
                                                               data,
                                                               list_type,
                                                               page)

                    # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è "–º–µ–Ω—è"
                    await bot_notification_about_like(callback.message)

            # –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "—Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –∏ —É–±—Ä–∞—Ç—å –∏–∑ –ø–æ–∏—Å–∫–∞
            if callback_data.action == 'hide':

                # –¥–æ–±–∞–≤–ª—è—é –≤ —Å–ø–∏—Å–æ–∫ "—Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
                await asyncio.to_thread(send_user_to_ignore_table,
                                        user_tg_id,
                                        current_user_id)

                # —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ data –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                await reload_pagination_after_hide_or_like(callback,
                                                           user_tg_id,
                                                           data,
                                                           list_type,
                                                           page)

                # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–º–Ω–µ"
                text_info_hide_user = 'üö∑ –ê–Ω–∫–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª <b>"–°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"</b> –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–æ–∏—Å–∫–∞.'
                await bot_notification_about_dislike(callback.message,
                                                     text_info_hide_user)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç
        else:

            # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å
            await load_pagination_start_or_end_data(callback.message,
                                                    data,
                                                    'paginator',
                                                    list_type,
                                                    total_pages,
                                                    page=page)

    await callback.answer()
