import asyncio
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputMediaVideo
from aiogram import F, Router, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import hobby_search
from src.handlers.search_users.all_users_search import search_all_users
from src.modules.pagination_logic import (load_bot_pagination_start_or_end_data,
                                          load_pagination_start_or_end_data)

from src.modules.notifications import loader, attention_message

from src.modules.delete_messages import del_last_message
from src.handlers.edit_name import check_emodji
from src.database.requests.search_users import (get_stemmed_hobbies_list,
                                                check_users_by_hobbies,
                                                search_users)

from src.handlers.search_users.error_handlers_search import wrong_search_hobby_name

import src.modules.keyboard as kb


router = Router()


class Registration(StatesGroup):
    search_city = State()
    search_hobby = State()


delete_messages = []
delete_last_message = []


# ================================
# –ü–û–ò–°–ö –õ–Æ–î–ï–ô –ü–û –•–û–ë–ë–ò           |
# ================================


async def search_users_by_hobby(callback, state):

    print(f'–ó–ê–ì–†–£–ñ–ï–ù–û –ú–ï–ù–Æ –ü–û–ò–°–ö –ü–û –•–û–ë–ë–ò')

    edit_message = await callback.message.edit_media(
        media=InputMediaVideo(
            media=f'{hobby_search}',
            caption=(
                '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                '\n\nüìåüí¨ –ü—Ä–∏—à–ª–∏—Ç–µ <b>—É–≤–ª–µ—á–µ–Ω–∏–µ</b> –≤ —á–∞—Ç'
                '\n\nüìå‚å®Ô∏è –∏–ª–∏ <b>–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
            ),
            parse_mode='HTML'
        ),
        reply_markup=kb.hobbies_search
    )

    await state.update_data(message_id=edit_message.message_id)
    await state.set_state(Registration.search_hobby)


# –ø–æ –º–æ–∏–º —Ö–æ–±–±–∏ –∏–ª–∏ –ø–æ –ª—é–±—ã–º


@router.callback_query(F.data.in_(['my_hobbies', 'all_hobbies']))
async def my_hobbies_or_all(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    search_data = callback.data

    # –ø–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data_state = await state.get_data()
    gender_data = data_state.get('type_of_gender')
    city_data = data_state.get('city_users')

    if search_data == 'my_hobbies':

        print(f'–í–´–ë–†–ê–ù –ü–û–ò–°–ö –ü–û –ú–û–ò–ú –•–û–ë–ë–ò')
        print(f'–î–ê–ù–ù–´–ï –í –°–û–°–¢–û–Ø–ù–ò–ò - –ü–û–õ: {gender_data}, –ì–û–†–û–î: {city_data}')

        # –ø–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Ö–æ–æ–±–∏ (–ø—Ä–æ–≥–æ–Ω—è—é —á–µ—Ä–µ–∑ —Å—Ç–µ–º–º–∏–Ω–≥) –∏ —É–¥–∞–ª—è—é —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        my_hobbies_data = await asyncio.to_thread(get_stemmed_hobbies_list, user_tg_id=user_tg_id)

        if not my_hobbies_data:

            try:
                await callback.message.edit_media(
                    media=InputMediaVideo(
                        media=f'{hobby_search}',
                        caption=(
                            '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                            '\n\n‚ùå <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏–π –ø—É—Å—Ç</b>'
                            '\n\n–î–æ–±–∞–≤—Ç—å–µ —É–≤–ª–µ—á–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ '
                            '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '
                            '–≤—ã–±—Ä–∞–≤ –≤–∞—Ä–∏–∞–Ω—Ç <b>"–ù–µ –≤–∞–∂–Ω–æ"</b>...'
                            '\n\nüìåüí¨ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è</b> –≤ —á–∞—Ç'
                        ),
                        parse_mode='HTML'
                    ),
                    reply_markup=kb.hobbies_search
                )
            except:
                await callback.message.answer_photo(
                    photo=f'{hobby_search}',
                    caption=(
                        '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                        '\n\n‚ùå <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏–π –ø—É—Å—Ç</b>'
                        '\n\n–î–æ–±–∞–≤—Ç—å–µ —É–≤–ª–µ—á–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ '
                        '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '
                        '–≤—ã–±—Ä–∞–≤ –≤–∞—Ä–∏–∞–Ω—Ç <b>"–ù–µ –≤–∞–∂–Ω–æ"</b>...'
                        '\n\nüìåüí¨ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è</b> –≤ —á–∞—Ç'
                    ),
                    parse_mode='HTML',
                    reply_markup=kb.hobbies_search
                )
            await state.set_state(Registration.search_hobby)

        else:

            # –ø–æ–≤–µ—Ä—è—é –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ö–æ–±–±–∏ –∫–∞–∫ —É "–º–µ–Ω—è"
            check_users_by_my_hobbies = await asyncio.to_thread(check_users_by_hobbies,
                                                                user_tg_id,
                                                                gender_data,
                                                                city_data,
                                                                my_hobbies_data)

            if check_users_by_my_hobbies:

                data = await asyncio.to_thread(search_users,
                                               user_tg_id,
                                               gender_data,
                                               city_data,
                                               my_hobbies_data)

                await state.clear()

                await loader(callback.message, '–°–µ–∫—É–Ω–¥—É, –∑–∞–≥—Ä—É–∂–∞—é ü§î')

                total_pages = len(data)

                await load_pagination_start_or_end_data(callback.message,
                                                        data,
                                                        'paginator',
                                                        'hobbies_users',
                                                        total_pages)

                if total_pages == 1:
                    await attention_message(callback.message, '<b>–ù–∞–π–¥–µ–Ω –≤—Å–µ–≥–æ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>', 2)

                await state.update_data(users_data=data)

            else:
                try:
                    await callback.message.edit_media(
                        media=InputMediaVideo(
                            media=f'{hobby_search}',
                            caption=(
                                '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                                '\n\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å —Å—Ö–æ–∂–∏–º–∏ '
                                '—É–≤–ª–µ—á–µ–Ω–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî</b>'
                                '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '
                                '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>–≥–æ—Ä–æ–¥</b> –∏–ª–∏ <b>–ø–æ–ª</b>.'
                                '\n\nüìå‚å®Ô∏è –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ <b>–≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
                                '\n\nüìåüí¨ –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è</b> –≤ —á–∞—Ç'

                            ),
                            parse_mode='HTML'
                        ),
                        reply_markup=kb.hobbies_search
                    )
                except:
                    await callback.message.answer_photo(
                        photo=f'{hobby_search}',
                        caption=(
                            '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                            '\n\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å —Å—Ö–æ–∂–∏–º–∏ '
                            '—É–≤–ª–µ—á–µ–Ω–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî</b>'
                            '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '
                            '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>–≥–æ—Ä–æ–¥</b> –∏–ª–∏ <b>–ø–æ–ª</b>.'
                            '\n\nüìå‚å®Ô∏è –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ <b>–≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
                            '\n\nüìåüí¨ –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è</b> –≤ —á–∞—Ç'
                        ),
                        parse_mode='HTML',
                        reply_markup=kb.hobbies_search
                    )
                await state.set_state(Registration.search_hobby)

    elif search_data == 'all_hobbies':

        print(f'–í–´–ë–†–ê–ù –ü–û–ò–°–ö –ü–û –í–°–ï–ú –•–û–ë–ë–ò (–ù–ï –í–ê–ñ–ù–û)')

        try:
            hobbies_data = ['all']

            data = await asyncio.to_thread(search_users,
                                           user_tg_id,
                                           gender_data,
                                           city_data,
                                           hobbies_data)

            await state.clear()

            await loader(callback.message, '–°–µ–∫—É–Ω–¥—É, –∑–∞–≥—Ä—É–∂–∞—é ü§î')

            total_pages = len(data)

            await load_pagination_start_or_end_data(callback.message,
                                                    data,
                                                    'paginator',
                                                    'hobbies_users',
                                                    total_pages)

            if total_pages == 1:
                await attention_message(callback.message, '<b>–ù–∞–π–¥–µ–Ω –≤—Å–µ–≥–æ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>', 2)

            await state.update_data(users_data=data)

        except:

            await search_all_users(callback, state, gender_data)


# –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ö–æ–±–±–∏


@router.message(Registration.search_hobby)
async def search_by_hobby(message: Message, state: FSMContext, bot: Bot):
    await del_last_message(message)

    print(f'–Ø –û–¢–ü–†–ê–í–ò–õ –•–û–ë–ë–ò –í –ß–ê–¢')

    user_tg_id = message.from_user.id
    data_state = await state.get_data()
    gender_data = data_state.get('type_of_gender')
    city_data = data_state.get('city_users')

    edit_message = await state.get_data()
    message_id = edit_message.get('message_id')

    if message.content_type == 'text':
        request = message.text.lower()

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–º–∞–π–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        emodji_checked = await check_emodji(request)

        if not emodji_checked:
            await wrong_search_hobby_name(user_tg_id, message_id, bot)
            return

        # —Å—Ç–µ–º–º–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤
        stemmed_words = await asyncio.to_thread(get_stemmed_hobbies_list, hobby_name=request)

        print(f'–•–û–ë–ë–ò –ü–†–û–®–õ–û –í–°–ï –ü–†–û–í–ï–†–ö–ò')
        print(f'–í–´–ë–†–ê–ù–ù–´–ô –ì–û–†–û–î: {city_data}\n–í–´–ë–†–ê–ù–ù–´–ô –ü–û–õ: '
              f'{gender_data}\n–•–û–ë–ë–ò –î–õ–Ø –ü–û–ò–°–ö–ê: {stemmed_words}')

        # –ø–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –∑–∞–ø—Ä–æ—Å–∞
        check_users_by_my_hobbies = await asyncio.to_thread(check_users_by_hobbies,
                                                            user_tg_id,
                                                            gender_data,
                                                            city_data,
                                                            stemmed_words)

        if check_users_by_my_hobbies:

            # –ø–æ–ª—É—á–∞—é –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            data = await asyncio.to_thread(search_users,
                                           user_tg_id,
                                           gender_data,
                                           city_data,
                                           stemmed_words)

            await state.clear()

            await loader(message, '–°–µ–∫—É–Ω–¥—É, –∑–∞–≥—Ä—É–∂–∞—é ü§î')

            total_pages = len(data)

            await load_bot_pagination_start_or_end_data(bot,
                                                        user_tg_id,
                                                        message_id,
                                                        data,
                                                        'paginator',
                                                        'hobbies_users',
                                                        total_pages)

            if total_pages == 1:
                await attention_message(message, '<b>–ù–∞–π–¥–µ–Ω –≤—Å–µ–≥–æ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>', 2)

            await state.update_data(users_data=data)

        else:

            print(f'–°–†–ê–ë–û–¢–ê–õ–û –£–°–õ–û–í–ò–ï –ï–°–õ–ò –ù–ï–¢ –°–û–í–ü–ê–î–ï–ù–ò–ô –ü–û –•–û–ë–ë–ò: '
                  f'{stemmed_words}')

            await bot.edit_message_media(
                chat_id=user_tg_id,
                message_id=message_id,
                media=InputMediaVideo(
                    media=f'{hobby_search}',
                    caption=(
                        '\nüîé <b>–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è?</b>'
                        '\n\n‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º–∏ —É–≤–ª–µ—á–µ–Ω–∏—è–º–∏ –≤ –¥–∞–Ω–Ω–æ–º '
                        '–≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b> üòî'
                        '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '
                        '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>–≥–æ—Ä–æ–¥</b> –∏–ª–∏ <b>–ø–æ–ª</b>.'
                        '\n\nüìå‚å®Ô∏è –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ <b>–≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</b> –Ω–∏–∂–µ'
                        '\n\nüìåüí¨ –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–¥—Ä—É–≥–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ</b> –≤ —á–∞—Ç:'
                    ),
                    parse_mode='HTML'
                ),
                reply_markup=kb.hobbies_search
            )

    else:
        await wrong_search_hobby_name(user_tg_id, message_id, bot)
