from time import sleep
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.methods import DeleteMessage

from src.database.models import async_session, User
from sqlalchemy import select
import src.keyboard as kb

router = Router()

class Registration(StatesGroup):
  name = State()

#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@router.message(CommandStart())
async def start(message: Message):
  tg_id = message.from_user.id
  async with async_session() as session:
    user_id = await session.scalar(select(User).where(User.tg_id == tg_id))
    user = await session.scalar(select(User.name).where(User.tg_id == tg_id))
    if user_id:
      await message.answer(f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user}!')
      sleep(.5)
      await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:', reply_markup=kb.main)
    else:
      await message.answer('–ü—Ä–∏–≤–µ—Ç!')
      sleep(.5)
      await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.', reply_markup=kb.regkey)

@router.callback_query(F.data == 'registration')
async def reg(callback: CallbackQuery, state: FSMContext):
  await callback.answer('–ó–∞–≥—Ä—É–∂–∞—é...')
  await state.set_state(Registration.name)
  sleep(.5)
  await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
  
@router.message(Registration.name)
async def reg_name(message: Message, state: FSMContext):
  await state.update_data(name=message.text)
  data = await state.get_data()
  tg_id = message.from_user.id
  async with async_session() as session:
    user_id = await session.scalar(select(User).where(User.tg_id == tg_id))
    if user_id:
      sleep(.5)
      await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
      sleep(.5)
      await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é.', 
                           reply_markup=kb.main)
      await state.clear()
    else:
      session.add(User(tg_id=tg_id, name=message.text))
      await session.commit()
      sleep(.7)
      await message.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {data["name"]}, –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
      sleep(2)
      await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å,')
      sleep(.5)
      await message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:', reply_markup=kb.main)
      await state.clear()
  
@router.message(F.text == 'üóÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def open_main_menu(message: Message):
  sleep(.5)
  await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=kb.users)
  
@router.message(F.text == 'üß™ Test button')
async def try_again(message: Message):
  sleep(1)
  await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë...', reply_markup=kb.main)